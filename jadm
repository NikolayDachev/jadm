#!/usr/bin/env python
########################################################################################
# Jadm license information
#
'''
Copyright (c) <2014>, <Nikolay Georgiev Dachev> <nikolay@dachev.info>
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'''
########################################################################################
# Python modules 
# datetime - used for current date/time on event
# tabulate - used to print useful infomration in table format
# os, sys, subprocess - used for comunication with FreeBSD
# netifaces - used for check FreeBSD bridge interfaces 
# ipaddress - used to check if jail ip is from gateway network
# cmd - used for jadm command shell

from datetime import datetime
from tabulate import tabulate 
from ipaddress import *
import os
import sys
import subprocess
import netifaces
import cmd

########################################################################################
# Main config vars:
########################################################################################

# jadm version
jadm_version = "ver. 0.8"

# jail.conf location by default /etc/jail.conf
jailconf = '/etc/jail.conf' 

# jadm log file
logfile = '/var/log/jadm.log'

# empty vars
bridge_int = ''
jzfs = ''
jpath = ''

########################################################################################
# Main Functions
########################################################################################


def initcheck():
   """
########################################################################################
# This function make initial check when jadm is started for:
#  - /etc/jail.conf - exist if not exist start initsetup()
#  - if bridge interface taken from /etc/jail.conf exist in system / on fail jadm exit 
#  - if jails zfs path taken from /etc/jail.conf exist in system / on fail jadm exit
#
   """
   check_jailconf = os.path.isfile(jailconf)
   if check_jailconf == False:
# print and add to log file            
      print " "
      logmsg = "'/etc/jail.conf not exist initsetup will be started...' "
      print " "
      print logmsg
      log(logmsg)  
 
      initsetup()
      return False

def def_vars():
   """
########################################################################################
# load default vars fomr /etc/jail.conf file 
# (jzfs, jpath) and default bridge int
#
   """
# set global jadm vars
   global jzfs, jpath, bridge_int

# open jail.conf
   jc = open(jailconf, 'r')
   jchek = []
   for i in jc:
      jchek.append(i)

# find default zfs var
   for i in jchek:
      if "$jedir" in i:
         bi = i.index('"')
         jzfs = i[bi:-2]
         jpath = jzfs[1:-1]
         jzfs = jzfs[2:-2]
         break

# find default bridge var
   for i in jchek:
      if "$bridge" in i:
         bi = i.index('"')
         bridge_int = i[bi:-2]
         bridge_int = bridge_int[1:-1]
         break

# close jail.conf
   jc.close()

# check if jadm bridge interface exist
   try:
      netifaces.ifaddresses(bridge_int)[netifaces.AF_INET]
   except ValueError:
      print "      WARNING: Bridge interface '%s' not found!" % (bridge_int)
      sys.exit(0)

# check if jadm zfs exist
   try:
      subprocess.check_output("zfs list "+jzfs, shell=True)
   except:
      print "      WARNING: ZFS '%s' not found!" % (jzfs)
      sys.exit(0)

def ch_ipv4(sp):
    """
########################################################################################
# This function check if ip address fromat sp var is correct 
# numbers of octet should be 4, each octet separated by '.' should be less than 256
#
    """
    octet = sp.split('.')
    if len(octet) != 4:
       return False
    try:
       return all(0<=int(p)<256 for p in octet)
    except ValueError:
       return False

def bridge(gwc = 0, brc = bridge_int):
  """
########################################################################################
# find and display in table format existing bridge interfacess in system
#
  """
# bridge interface list
  br_interface = []
# bridge ip addresses list
  gw_ipaddr = []
# bridge network list
  gw_network = []
# gatweway start number list
  gw_number = 0

# fill all lists for bridge
  for i in netifaces.ifaddresses(bridge_int)[netifaces.AF_INET]:
     br_interface.append([gw_number, ' ', i['addr'], i['netmask']])
     gw_ipaddr.append(i['addr'])
     gw_network.append(i['netmask'])
     gw_number = gw_number + 1
  br_interface[0][1] = bridge_int

# print jadm gateways  table
  br_menu = ["Number", "Bridge name", "Gateway IP Address", "Gatewy Network Mask"]
  print tabulate(br_interface, br_menu)

# return bridge interface name, ip addresses and network mask
  return (br_interface, gw_ipaddr, gw_network)

def bridge_network_check(ip, bridge_ip, bridge_netmask):
   """
########################################################################################
# check if ipaddress is in selected bridge network
#
   """
# convert vars to unicode 
   ip = unicode(ip)
   bridge_ip = unicode(bridge_ip)
   bridge_netmask = unicode(bridge_netmask)
# by default ip is not in bridge network 
   brctl = 0

# bridge insterface ip network
   brdige_network = IPv4Interface('%s/%s' % (bridge_ip, bridge_netmask)).network

# check if ip is from bridge network and return bridge control var (brctl) = true
   if IPv4Address(ip) in list(IPv4Network(brdige_network)):
      brctl = 1

# return brctl and bridge ip network 
   return brctl, brdige_network 
 
def load_jail_config(conf_f):
   """
########################################################################################
#load_jail_config - load default jail conf file and return it in list.
#remove all junk only needed values are taken.
#
   """
# open jail.conf
   jc = open(conf_f, 'r')

# take all elements from jail.conf, remove "junk" data and applay to mas[]
# only data which will be used is taken, all valuse are in order 
   mas = []
   for i in jc:
      i = i.strip('\n').strip(';').replace('\"', '').replace('host.hostname = ', '').replace('$jip = ', '').replace('jid =', '' ).replace('$ip = ', '').replace('$jgw =', '').replace(' ', '')
      mas.append(i)
   jc.close()
   return mas

def jails():
   """
########################################################################################
# Return only jails names, they are used for search point in load_jail_config() and etc
#
   """

   jsname = []
# enumerate in order to avoid wrong index for similiar items like { 
# take only elements which are before { symbol
   for i, x in enumerate(load_jail_config(jailconf)): 
      if "{" in x:
          jsname.append(i - 1)  
   return jsname

def find_jail(jname):
   """
####################################################################################################
# Find jails by name (list index in jailconf) return index of jails config start and end (name { })
# Find jail global options section by /etc/jail.conf Global section comments #
#
   """
   jc = open(jailconf, 'r')
   jcl = []
   for i in jc:
      i = i.strip('\n')
      jcl.append(i)
   jb = jcl.index(jname)
   
   x = 0
   for i in jcl[jb:]:
      x = x + 1
      if "}" in i:
         je = jb + x
         break
# this string is used for global options start index 
# if is changed in jail.conf function  will not work correct
      if "###################### End of Jails Global Options ##########################################" in i:
         je = jb + x
         break

   jc.close()
   return jb, je, jcl
    
def jails_list():
   """
########################################################################################
# Return list of jails by order:
# active[] - 1 for started jail, 0 for not running 
# name[] - all jails names
# jid[] - all jails id numbers
# ip[] - all jails ip addresses
# gw[] - all jails gateways (bridge ip addresses)
# hostname[] - all jails hostnames
# path[] - zfs path for each jail
# jailscfg[] - each jail full config (all other elements per jail) 
#
   """
# load jails config
   mas = load_jail_config(jailconf)
 
   active = []
   name = []
   jid = []
   ip = []
   gw = []
   hostname = []
   path = []
   jailscfg = []

   for i in jails():
# 1st element is jail name
# all other are 1ts element positon +
      name.append(mas[i])
      hostname.append(mas[i + 3])
      jid.append(mas[i + 4])
      ip.append(mas[i + 5])
      gw.append(mas[i + 6])
      path.append("%s%s" % (jpath,mas[i]))

# check if jail is active or inactive
   caj = subprocess.check_output("jls -h jid", shell=True).strip('jid')
   caj = caj.split('\n')
   
# convert active/inactive results to 1 or 0 which displayed in jadm list table   
   for i in jails():

      if mas[i + 4] in caj:
         act = 1
         active.append('1')
      else:
         act = 0
         active.append('1')

# check jail snapshot number
      zfs_snap = 0
      cmd = "zfs list -t snapshot |grep %s" %  (mas[i])
      try:
            for x in subprocess.check_output(cmd, shell=True).split('\n'):
               zfs_snap = zfs_snap + 1
            zfs_snap = zfs_snap - 1
      except subprocess.CalledProcessError as e:
            zfs_snap = 0
       
 # check jail zfs quota      
      jzfspath = jzfs+"/"+mas[i]
      zfs_quotacheck = subprocess.check_output("zfs get -H quota %s" % (jzfspath), shell=True).replace('\n', ' ').replace('\t', ' ').split(' ')[2]

# check jail zfs use/aveilable
      zfs_use_aveilable = subprocess.check_output("zfs list -H  %s" % (jzfspath), shell=True).replace('\n', ' ').replace('\t', ' ').split(' ')
      zfs_use_aveilable = zfs_use_aveilable[1]+"/"+zfs_use_aveilable[2]

# jail config oprtions
      jailscfg.append([act, mas[i + 4], mas[i], mas[i + 3],mas[i + 5],mas[i + 6], "%s%s" % (jpath, mas[i]), zfs_use_aveilable, zfs_quotacheck,  zfs_snap])

# return lists for all jails in order 
# active[] - active or not active jasil 
# name[] - jail names
# jid[] - jails id's
# ip[] - jails ip addresses
# gw[] - jails gateways
# hostname[] - jails hostnames
# path - jails paths
# soted() return list element with all jails configs ordered by jid
   return  (active, name, jid, ip, gw, hostname, path, sorted(jailscfg,  key=lambda x: int(x[1])))

def bdsinstall_src(install_path):
   """
########################################################################################
# Install jail bsd envoirment in jail path
# - bsdinstall jail $path
# - install from /usr/src or build new /usr/src world and install it in jail path
#
   """
   print " "
   chlist = ['bsd', 'src', 'template','!']
   print "         ---   Jail envoirment will be installed from:"
   print "               (template) use existing jail like tamplate"
   print "               (bsd) use bdsinstaller"
   print "               (src) install from  bsd sources /usr/src/ this will take a more time for install ..."
   print "               ! - for interupt"

# new jail config options list
   temp_add_cfg = []

   while True:
      choise = raw_input("install source:>")
      if choise == '!':
         print "            Interrupted by user - !"
         return False
      if choise not in chlist:
         print "                  type only 'template', 'bsd', 'src' or '!'"
   
# install new jail with FreeBSD bsdinstall tool
      if choise == 'bsd':
         
         os.system("bsdinstall jail %s" % (install_path))
         jadm_postinstall(install_path)

         print " "
         print "       Jail envoirment was installed via 'bsdinstaller'"
         return temp_add_cfg
   
# install new jail from FreeBSD sources /usr/src (build and install)  
      if choise == 'src':

         src_chlist = ['build', 'install']
         src_choise = ''
       
         print " "
         print "         ---   Jails will be installed from source file"
         print "               If you want to build world new src world type 'build'"
         print "               If you want to use already build world type 'install'"
         print "               ! - for interupt"

         while src_choise != '!':
            src_choise = raw_input("build/install :>")

# install jail with prebuilded src
            if src_choise == "install":
               os.system("cd /usr/src && make installworld DESTDIR=%s" % (install_path))
               os.system("cd /usr/src && make distribution DESTDIR=%s" % (install_path))
               jadm_postinstall(install_path)
               return temp_add_cfg

# first make build world in /usr/src and then install
            if src_choise == "build":
               os.system("cd /usr/src && make buildworld")
               os.system("cd /usr/src && make installworld DESTDIR=%s" % (install_path))
               os.system("cd /usr/src && make distribution DESTDIR=%s" % (install_path))
               jadm_postinstall(install_path)
               return temp_add_cfg

            print "            Interrupted by user - !"
            return False
 
         print " "
         print "       Jail envoirment was installed via 'source'"
         return False

# copy existing jail zfs and local config taken from jail.conf
      if choise == 'template':
         print " "
         jail_table('1')

         while True:
            jtemplate = raw_input("enater jail name:> ")
         
            if jtemplate not in jails_list()[1]:
               print " "
               print "       Please enter existing Jail name!"
               continue
            else:
               break

         jtemp_file = "jadm_temp_file"
         tempdir = "/%s" % (jzfs)

         print "       Create temporary snapshot '%s/%s@jadm_template'" % (jzfs, jtemplate)
         os.system('zfs snapshot %s/%s@jadm_template' % (jzfs, jtemplate))

         print "       Copy '%s/%s@jadm_template' data to '%s'" % (jzfs, jtemplate, install_path[1:])
         os.system('zfs send %s/%s@jadm_template | zfs recv -F %s' % (jzfs, jtemplate, install_path[1:]))

         print "       Destroy temporary snapshots '%s/%s@jadm_template' and '%s@jadm_template'" % (jzfs, jtemplate, install_path[1:])
         os.system('zfs destroy %s/%s@jadm_template' % (jzfs, jtemplate))
         os.system('zfs destroy %s@jadm_template' % (install_path[1:]))
 
         print "       Copy '--- additional config ---' from template jail '%s'" % (jtemplate)
         
# find jail tamplate local options          
         fj = find_jail(jtemplate)
         jb = fj[0]
         je = fj[1]
         jcl = fj[2]
         
# update jail.conf
         jc = open(jailconf, 'r')

         for i in jcl[jb+8:je-1]:
             temp_add_cfg.append(i)
         jc.close()
         
         return temp_add_cfg

         print " "
         print "       Jail envoirment was installed via '%s/%s' as template" % (jzfs, jtemplate)
         return False

      
def jadm_postinstall(new_jail_path):
   """
########################################################################################
# customize jails after installation finish
# do it after bdsinstall_src(install_path) finish
#
   """
# simple echo to new jail /etc/ config 
   print " "
   print "               JADM run postinstall"
   os.system("echo '# Added by JADM' >> %s" % (new_jail_path+"/etc/rc.conf"))
   os.system("echo 'sendmail_enable=\"NONE\"' >> %s" % (new_jail_path+"/etc/rc.conf"))
   os.system("echo 'firewall_enable=\"YES\"' >> %s" % (new_jail_path+"/etc/rc.conf"))
   os.system("echo 'firewall_script=\"/etc/rc.firewall\"' >> %s" % (new_jail_path+"/etc/rc.conf"))
   os.system("echo 'firewall_type=\"OPEN\"' >> %s" % (new_jail_path+"/etc/rc.conf"))
   os.system("touch %s" % (new_jail_path+"/etc/resolv.conf"))
   os.system("echo 'nameserver 8.8.8.8' >> %s" % (new_jail_path+"/etc/resolv.conf"))

def zfs_quota(jzfs_path, jquota):
      """
########################################################################################
# zfs quota set for jail
#
      """
      if jquota == 'none':
         os.system("zfs set quota=%s %s" % (jquota, jzfs_path))
      else:
# check if zfs set quota is correct
         if os.WEXITSTATUS(os.system("zfs set quota=%s %s" % (jquota, jzfs_path))) != 0:
            print "            Incorrect zfs quota!"
         else:
            return False
         
         
def jail_create():
   """
########################################################################################
# Create new jail 
# add it to /etc/jail.conf
# use bsdinstall_src() 
# add zfs quota if is needed 
#
   """
   jails = jails_list()
   print "            You can use ! symbol to interrupt Jail creation in each step"
   
   while True:
      jname = raw_input('Jail Name:> ')
      if jname in ['', ' ', '	']:
         print "            Please enter Jail Name!"
         continue

      if jname in jails[1]:
         print "            Jail with Name '%s' already exist please choose different name!" % (jname)
      elif jname == "!":
         print "            Interrupted by user - !"    
         return False 
      else:
         break
               
   while True:
      jhostname = raw_input('Jail Hostname:> ')
      if jhostname in ['', ' ', '   ']:
         print "            Please enter Jail Hostname!"
         continue

      if jhostname in jails[5]:
         print "            Jail with Hostname '%s' already exist please choose different name!" % (jhostname)
      elif jhostname == "!":
         print "            Interrupted by user - !"
         return False
      else:
         break

   while True:
      jid = raw_input('Jail ID:> ')
      if jid == "!":
         print "            Interrupted by user - !"
         return False
      try:
         int(jid)
      except ValueError:
         print "            Please use only numbers for Jail ID!"
         continue
      if jid in jails[2]:
         print "            Jail with ID '%s' already exist please choose different name!" % (jid)
      else:
         break

   brin, gwip, gwnet = bridge()
   while True:
      jgw = raw_input('Jail Gateway number:> ')

      if jgw == "!":
         print "            Interrupted by user - !"
         return False

      try:
        int(jgw)
      except ValueError:
        print "            Slecet valid Gateway number (%s - %s)!" % (0, len(gwip) - 1)
        continue

      if int(jgw) >= len(gwip):
         print "            Slecet valid Gateway number (%s - %s)!" % (0, len(gwip) - 1)
      else:
         gwnet = gwnet[int(jgw)]
         jgw = gwip[int(jgw)]
         break

   while True:
      ji = raw_input('Jail IP Address:> ')
      if ji == "!":
         print "            Interrupted by user - !"
         return False

      if ch_ipv4(ji) == False:
         print "            Please enter valid IP address!"
         continue
      
      bridge_ip_check, brnet = bridge_network_check(ji, jgw, gwnet)

      if int(bridge_ip_check) == 0:
         print "            %s ip addreess not in %s network" % (ji, brnet)
         continue
      else:
         jip = str(ji) + str(brnet)[-3:]
         if str(ji) == str(jgw):
            print "            '%s' is Gateway address please enter different!" % (jip)
            continue

         if jip in jails[3]:
            print "            Jail with IP address '%s' already exist please enter different!" % (jip)
         else:
            break
         
   while True:
      jquota = raw_input('Jail ZFS Quota (M)egabytes, (G)igabytes, (none) for unlimited:> ')
      
      if jquota == "!":
         print "            Interrupted by user - !"
         return False

      if jquota == "none":
         break

      try:
        int(jquota[:-1])
      except ValueError:
        print "            Please use numebrs only with (M)egabytes or (G)igabytes indicator at the end!)"
        continue

      if str(jquota[-1]) not in ['M', 'G']:
        print "            Please use only (M)egabytes or (G)igabytes indicator at the end!)"
        continue
      else:
        break
   
   while True:
      print " "
      print "...  New Jail will be created ... \n"
      new_jail_menu  = ['New Jail', 'Settings']
      new_jail_settings = [['Name', jname], ['Hostname', jhostname], ['ID', jid], ['IP address', jip], ['Gateway', jgw], ['ZFS', "%s/%s" % (jzfs, jname)], ['ZFS Quota', jquota]]
      print tabulate(new_jail_settings, new_jail_menu)

      yn = raw_input("... Please confirm (y/n): ")

      if yn == "!":
         print "            Interrupted by user"
         return False

      if yn in "nN":
         print "            Interrupted by user"
         return False
      
      if yn in "yY":
         zfs = subprocess.check_output("zfs list -H -o name", shell=True)
         zfs = zfs.split('\n')
         
         zfstest = jzfs + "/" + jname
         if zfstest in zfs:
            print "            WARNING: ZFS %s/%s alredy exist!" % (jzfs, jname)
            print "            use: If you want you can use it for %s Jail" % (jname)
            print "            recreate: We can recreate it (ALL EXISTING DATA WILL BE DESTROYED!) and install new jail world inside"
            print "            ! : Interrupt Jail creation"

            while True:
               zfsch = raw_input("Enter your choice (use|recreate|!) :> ")
 
               if zfsch == "!":
                  print "            Interrupted by user - !"
                  return False

               if zfsch == "recreate":
                  os.system("zfs destroy %s/%s" % (jzfs, jname))
                  os.system("zfs create %s/%s" % (jzfs, jname))
                  zfs_quota(zfstest, jquota)
 
                  temp_add_cfg = bdsinstall_src(jpath+jname)
                  break

               if zfsch == "use":
                  print "            Jail %s will use existing world %s%s" % (jname,jpath,jname)
                  temp_add_cfg = []
                  break 

               if zfsch not in ['use','recreate','!']:
                  print "            Please enter only 'use','recreate' or'!'"
                  continue
                            
         if zfstest not in zfs:
            os.system("zfs create %s/%s" % (jzfs, jname))
            zfs_quota(zfstest, jquota)
            temp_add_cfg = bdsinstall_src(jpath+jname) 

         dt = str(datetime.now())
         newjail = [' \n', jname, '{', '# Jail "%s" was modified on %s by ... JADM ...' % (jname, dt), 'host.hostname = %s;' % (jhostname), 'jid = %s;' % (jid), '$jip = "%s";' % (jip), '$jgw = "%s";' % (jgw), '### jail local options ###', '}']
         for i in temp_add_cfg:
            newjail.insert(-1, i)

         jc = open(jailconf, 'a')
         jc.write('\n'.join(newjail)) 
         jc.close()
         
         print " "
         logmsg = "Jail \'%s\' was successful created!" % (jname)
         print logmsg
         log(logmsg)
         return False
      else:
         print "            Selecet y/Y for YES or n/N for NO!\n"
         continue

def jail_start_stop(action, jnid = ''):
   """
########################################################################################
# Start or Stop action var jndid var jail or all jails
#
   """
   jails = jails_list()

   if jnid == "all":
      if action == "start":
         yn = raw_input("      do you want to start ALL jails on system (y/n):> ")
         if yn  in "nN":
            return False

         elif yn in "yY":
            for i in jails[1]:
               if "template" in i:
# print and add to log file            
                   print " "
                   logmsg = "start all -> mark as template jadm will skip: '%s'" % (i)
                   print logmsg
                   log(logmsg)  
  
                   continue
# print and add to log file 
               print " "
               logmsg = "start all -> We will start jail: '%s'" % (i)
               print logmsg
               log(logmsg)   
 
               os.system("jail -c %s" % (i))
            return False
         else:
            print " "

      if action == "stop":
         yn = raw_input("      do you want to stop ALL jails on system (y/n):> ")
         if yn in "nN":
            return False

         elif yn in "yY":
            for i in jails[1]:
# print and add to log file            
               print " "
               logmsg = "stop all -> We will stop jail: '%s'" % (i)
               print logmsg
               log(logmsg)  

               os.system("jail -r %s" % (i))
            return False
         else:
            print " "
 
      if action == "reboot":
         yn = raw_input("      do you want to reboot ALL jails on system (y/n):> ")
         if yn in "nN":
            return False

         elif yn in "yY":
            for i in jails[1]:
               if "template" in i:
# print and add to log file            
                   print " "
                   logmsg = "reboot all -> mark as template jadm will skip: '%s'" % (i)
                   print logmsg
                   log(logmsg)  
  
                   continue
# print and add to log file            
               print " "
               logmsg = "reboot all -> We will reboot jail: '%s'" % (i)
               print logmsg
               log(logmsg)  
   
               os.system("jail -rc %s" % (i))
            return False
         else:
            print " "
 
   try:
      int(jnid) == True
      testid = 0
   except ValueError:
      testid = 1

   if testid == 0:
      if jnid in jails[2]:
         j = jails[2].index(jnid)
         jnid = jails[1][j]
      else:
         print "       Jail with ID '%s' not found!" % (jnid)
         return False

   if jnid in jails[1]:
      if action == "start":
         yn = raw_input("      do you want to start jail '%s' (y):> " % (jnid))
         if yn in "nN":
            return False
         
         elif yn in "yY": 
# print and add to log file            
             print " "
             logmsg = "Start Jail '%s' in process ..." % (jnid)
             print logmsg
             log(logmsg)  

             os.system("jail -c %s" % jnid)

      elif action == "stop":
         yn = raw_input("      do you want to stop jail '%s' (y):> " % (jnid))
         if yn in "nN":
            return False

         elif yn in "yY":
# print and add to log file            
             print " "
             logmsg = "Stop Jail '%s' in process ..." % (jnid)
             print logmsg
             log(logmsg)  

             os.system("jail -r %s" % jnid)

      elif action == "reboot":
         yn = raw_input("      do you want to reboot jail '%s' (y):> " % (jnid))
         if yn in "nN":
            return False

         elif yn in "yY":
# print and add to log file            
             print " "
             logmsg = "Reboot Jail '%s' in process ..." % (jnid)
             print logmsg
             log(logmsg)  

             os.system("jail -rc %s" % jnid)
            
         else:
            print " "
   else: 
      print "       Jail with Name '%s' not found!" % (jnid)

def jail_destroy(action, jnid = ''):
   """
##############################################################################
# This function use action var (remove/destroy) with jnid var (name/jail id)
# to destroy (remove jail from jail.conf also remove zfs) 
# or remove it (only remove jail from jail.conf)
#
   """

   jails = jails_list()
      
   try:
      int(jnid) == True
      testid = 0
   except ValueError:
      testid = 1

   if testid == 0:
      if jnid in jails[2]:
         j = jails[2].index(jnid)
         jnid = jails[1][j]
      else:
         print "       Jail with ID '%s' not found!" % (jnid)
         return False

   if jnid in jails[1]:

      jail_start_stop('stop', jnid) # stop jail befor other action

      fj = find_jail(jnid)
      jb = fj[0]
      je = fj[1]
      jcl = fj[2]

      if action == "remove":
         print "      WARNING: Jail '%s' will be removed but data/zfs will be keeped!" % (jnid)
         yn = raw_input("... Please confirm (y/n): ")
         if yn in "nN":
            print "      Jail remov was interrupted by user"
            return False
         if yn in "yY":
            jc = open(jailconf, 'w')
            del jcl[jb:je]
            jc.write('\n'.join(jcl))
            jc.close()
            print " "
            logmsg = "WARNING: Jail '%s' was removed!" % (jnid) 
            print logmsg
            log(logmsg)
     
      if action == "destroy":
         print "      WARNING: Jail '%s' will be destroyed all data/zfs and snapshots will be deleted!" % (jnid)
         yn = raw_input("... Please confirm (y/n): ")
         if yn in "nN":
            print "      Jail remov was interrupted by user"
            return False
         if yn in "yY":
          
            jc = open(jailconf, 'w')
            del jcl[jb:je]
            jc.write('\n'.join(jcl))
            jc.close()
            os.system("zfs destroy -r %s/%s" % (jzfs, jnid))
            print " "
            logmsg = "WARNING: Jail '%s' was destroyed!" % (jnid)
            print logmsg
            log(logmsg)
   else:
      print "       Jail with Name '%s' not found!" % (jnid)

def jail_snapshot_list(jnid = ''):
   """
###########################################################################################
# jail zfs snapshot list
#
   """
   try:
      jsnap = subprocess.check_output("zfs list -t snapshot |grep "+jnid, shell=True)
   except:
      print "       no zfs snapshots find for '%s'" % (jnid)
      print " "
      return False

   jsnap = jsnap.split('\n')
   jsnapn = []
   for i in jsnap:
      i = i.split(' ')
      while True:
         try:
            i.remove("")
         except ValueError:
            break
      jsnapn.append(i)

   lmen = ['Number', 'Name', 'Size']
   del jsnapn[-1]
   jsn = 0
   jsnn = []
   for i in jsnapn:
      jsnn.append([jsn, i[0], i[3]])
      jsn = jsn + 1

   return [jsnn, lmen]



def jail_snapshot(action, jnid = ''):
   """
###########################################################################################
# This function use action var (listsnap, rmsnap, ceratesnap, restoresnap) with jnid var (name/jail id)
# to list zfs snapshot for jnid var, 
# remove snapshot for jnid var 
# or create zfs snapshot for jnid var
#
   """

   jails = jails_list()

   try:
      int(jnid) == True
      testid = 0
   except ValueError:
      testid = 1

   if testid == 0:
      if jnid in jails[2]:
         j = jails[2].index(jnid)
         jnid = jails[1][j]
      else:
         print "       Jail with ID '%s' not found!" % (jnid)
         return False

   if jnid in jails[1]:

      if action == "createsnap":
         dt =  str(datetime.utcnow().isoformat())
         jzfssnap = "%s/%s@%s" % (jzfs, jnid, dt)
         os.system("zfs snapshot "+jzfssnap)
# print and add to log file            
         print " "
         logmsg = "New snapshot '%s' was created for Jail '%s'!" % (jzfssnap, jnid)
         print logmsg
         log(logmsg)  
 
         return False

      print " "
      print "   ---   Snapshots list for Jail '%s'   ---   " % (jnid)
      print " "

      if action == "listsnap":
         if jail_snapshot_list(jnid) == False:
            return False

         lmen = jail_snapshot_list(jnid)[1]
         jsnn = jail_snapshot_list(jnid)[0]
         print tabulate(jsnn, lmen)

      if action == "rmsnap":
         if jail_snapshot_list(jnid) == False:
            return False

         lmen = jail_snapshot_list(jnid)[1]
         jsnn = jail_snapshot_list(jnid)[0]
         print tabulate(jsnn, lmen)

         print " "         
         while True:
            rmsnap = raw_input("       Enter snapshot number or '!' for exit: ")
            if rmsnap == "!":
               print "            Interrupted by user - !"
               return False
             
            try:
              int(rmsnap)
            except ValueError:
              print "            Please use only numbers for Snapshot number"
              continue
         
            sn = []
            for i in jsnn:
              sn.append(i[0])

            if int(rmsnap) in sn:
               print "            %s snapshot will be removed!" % (jsnn[int(rmsnap)][1])
               yn = raw_input("... Please confirm (y/n): ")
               if yn in "nN":
                  print "            Interrupted by user - !"
                  return False
         
               if yn in "yY":
                  os.system("zfs destroy "+jsnn[int(rmsnap)][1])
# prtin and add to log file            
                  print " "
                  logmsg = "'%s' jail snapshot '%s' was removed!" % (jnid, jsnn[int(rmsnap)][1])
                  print logmsg
                  log(logmsg)   
        
                  return False 
            else:
               print "            Snapshot number '%s' not exist please choose different number!" % (rmsnap)
               continue

      if action == "restoresnap":
         if jail_snapshot_list(jnid) == False:
            return False

         lmen = jail_snapshot_list(jnid)[1]
         jsnn = jail_snapshot_list(jnid)[0]
         print tabulate(jsnn, lmen)   
         print " "
      
         while True:
            snap = raw_input("       Enter snapshot number or '!' for exit: ")
            if snap == "!":
               print "            Interrupted by user - !"
               return False

            try:
              int(snap)
            except ValueError:
              print "            Please use only numbers for Snapshot number"
              continue
      
            sn = []
            for i in jsnn:
              sn.append(i[0])
   
            if int(snap) in sn:
               print "            '%s' will be restored from '%s' snapshot!" % (jnid, jsnn[int(snap)][1])
               print "             all snapshots newer than '%s' will be removed too!" % (jsnn[int(snap)][1])
               yn = raw_input("... Please confirm (y/n): ")
               if yn in "nN":
                  print "            Interrupted by user - !"
                  return False

               if yn in "yY":
                  jail_start_stop('stop', jnid) # stop jail befor other action
                  os.system("zfs rollback -r %s" % (jsnn[int(snap)][1]))
                  print "'            '%s' jail was restored from '%s' snapshot!" % (jnid, jsnn[int(snap)][1])
                  return False
            else:
               print "            Snapshot number '%s' not exist please choose different number!" % (snap)
               continue
      
   else:
      print "       Jail with name '%s' not found!" % (jnid)
      return False

def jail_modify(jnid = ''):
   """
########################################################################################
# modify existing jail in /etc/jail.conf and zfs envoirment if is needed
# 
   """
   jails = jails_list()

   try:
      int(jnid) == True
      testid = 0
   except ValueError:
      testid = 1

   if testid == 0:
      if jnid in jails[2]:
         j = jails[2].index(jnid)
         jnid = jails[1][j]
      else:
         print "       Jail with ID '%s' not found!" % (jnid)
         return False
   
   if jnid in jails[1]:

      jail_start_stop('stop', jnid) # stop jail befor other action

      for i in jails[-1]:
         if i[2] == jnid:
            jmodify = i
            del jmodify[0]
      print "       Jail '%s' settings" % (jmodify[1])
      print " "
      
      while True:
         jname = raw_input('Jail Name (%s):> ' % (jmodify[1]))
         if jname in ['', ' ', '   ']:
            jname = jmodify[1]
            break            
         elif jname in jails[1]:
            print "            Jail with Name '%s' already exist please choose different name!" % (jname)
         elif jname == "!":
            print "            Iinterrupted by user - !"
            return False
         else:         
            break
      while True:
         jhostname = raw_input('Jail Hostname (%s):> ' % (jmodify[2]))
         if jhostname in ['', ' ', '   ']:
            jhostname = jmodify[2]
            break
         elif jhostname in jails[5]:
            print "            Jail with Hostname '%s' already exist please choose different name!" % (jhostname)
         elif jhostname == "!":
            print "            Interrupted by user - !"
            return False
         else:
            break

      while True:
         jid = raw_input('Jail ID (%s):> ' % (jmodify[0]))
         if jid in ['', ' ', '   ']:
            jid = jmodify[0]
            break
         elif jid == "!":
            print "            Interrupted by user - !"
            return False
         try:
            int(jid)
         except ValueError:
            print "            Please use only numbers for Jail ID!"
            continue
         if jid in jails[2]:
            print "            Jail with ID '%s' already exist please choose different name!" % (jid)
         else:
            break

      brin, gwip, gwnet = bridge()
      while True:
         jgw = raw_input('Jail IP Gateway (%s):> ' % (jmodify[4]))
         if jgw in ['', ' ', '   ']:
            jgw = jmodify[4]
            gwnet_index = jmodify[4].index(jmodify[4])
            gwnet = gwnet[gwnet_index]
            break

         if jgw == "!":
            print "            Interrupted by user - !"
            return False

         try:
           int(jgw)
         except ValueError:
           print "            Slecet valid Gateway number (%s - %s)!" % (0, len(gwip) - 1)
           continue

         if int(jgw) >= len(gwip):
           print "            Slecet valid Gateway number (%s - %s)!" % (0, len(gwip) - 1)
         else:
           gwnet = gwnet[int(jgw)]
           jgw = gwip[int(jgw)]
           break

      while True:
         joldip = jmodify[3][:-3]
 
         ji = raw_input('Jail IP Address (%s):> ' % (joldip))

         if ji in ['', ' ', '   ']:
            ji = joldip

         if ji == "!":
             print "            Interrupted by user - !"
             return False

         elif ch_ipv4(ji) == False:
             print "            Please enter valid IP address!"
         else:
               
            bridge_ip_check, brnet = bridge_network_check(ji, jgw, gwnet)
            if int(bridge_ip_check) == 0:
               print "            %s ip addreess not in %s network" % (ji, brnet)
               continue
            if int(bridge_ip_check) == 1:
               jip = str(ji) + str(brnet)[-3:]
               if str(ji) == str(jgw):
                  print "            '%s' is Gateway address please enter different!" % (jip)
                  continue
               
               if ji == joldip:
                  break

               if jip in jails[3]:
                  print "            Jail with IP address '%s' already exist please enter different!" % (jip)
               else:
                  break
     
      while True:
         print "Old quota: %s" % (jmodify[7])
         jquota = raw_input('Jail ZFS Quota (M)egabytes, (G)igabytes, (none) for unlimited:> ')

         if jquota == "!":
            print "            Interrupted by user - !"
            return False

         if jquota == "none":
            break

         try:
            int(jquota[:-1])
         except ValueError:
            print "            Please use numebrs only with (M)egabytes or (G)igabytes indicator at the end!)"
            continue

         if str(jquota[-1]) not in ['M', 'G']:
            print "            Please use only (M)egabytes or (G)igabytes indicator at the end!)"
            continue
         else:
            break


   else:
      print "       Jail with name '%s' not found!" % (jnid)
      return False

   while True:
      print " "
      mod_jail_menu  = ['Jail', 'Old Settings', 'New Settings']
      mod_jail_settings = [['Name', jmodify[1], jname], ['Hostname', jmodify[2], jhostname, ], ['ID', jmodify[0], jid], ['IP address', jmodify[3], jip], ['Gateway', jmodify[4], jgw], ['ZFS', "%s/%s" % (jzfs, jmodify[1]) , "%s/%s" % (jzfs, jname)], ['ZFS Quota', jmodify[7], jquota]]
      print tabulate(mod_jail_settings, mod_jail_menu)
      print " "
      yn = raw_input("... Please confirm (y/n): ")
      if yn in "nN":
         print "            Interrupted by user"
         return False
         
      if yn in "yY":
         zfs = subprocess.check_output("zfs list -H -o name", shell=True)
         zfs = zfs.split('\n')

         zfstest = jzfs + "/" + jname

         if jquota != jmodify[7]:
            zfs_quota(zfstest, jquota)

         if jname != jmodify[1]:

            if zfstest in zfs:
               print "            WARNING: ZFS %s/%s alredy exist!" % (jzfs, jname)
               print "            use: If you want you can use it for %s Jail" % (jname)
               print "            recreate: We can recreate it (ALL EXISTING DATA WILL BE DESTROYED!) and install new jail world inside"
               print "            ! : Interrupt Jail creation"
  
               while True:
                  zfsch = raw_input("Enter your choice (use|recreate|!) :> ")
  
                  if zfsch == "!":
                     print "            Interrupted by user - !"
                     return False
        
                  if zfsch == "recreate":
                     os.system("zfs destroy %s/%s" % (jzfs, jname))
                     os.system("zfs create %s/%s" % (jzfs, jname))
                     zfs_quota(jzfs+"/"+jname, jquota)
                     bdsinstall_src(jpath+jname)

                     print "            Jail %s world was successful recreated for %s%s" % (jname,jpath,jname)
                     break

                  if zfsch == "use":
                     print "            Jail %s will use existing world %s%s" % (jname,jpath,jname)
                     jname = jmodify[1]
                     break 

                  if zfsch not in ['use','recreate','!']:
                     print "            Please enter only 'use','recreate' or'!'"
                     continue

         fj = find_jail(jmodify[1])
         jb = fj[0]
         je = fj[1]
         jcl = fj[2]

         dt = str(datetime.now())                
         jc = open(jailconf, 'w')
         jcl[jb] = jname
         jcl[jb+2] = '# Jail "%s" was modified on %s by ... JADM ...' % (jname, dt)
         jcl[jb+3] = 'host.hostname = %s;' % (jhostname)
         jcl[jb+4] = 'jid = %s;' % (jid)
         jcl[jb+5] = '$jip = "%s";' % (jip)
         jcl[jb+6] = '$jgw = "%s";' % (jgw)

         jc.write('\n'.join(jcl))
         jc.close()

         if jname != jmodify[1]:
            os.system("zfs rename %s/%s %s/%s" % (jzfs, jmodify[1], jzfs, jname))
# prtin and add to log file            
         print " "
         logmsg = "Jail \'%s\' was modified!" % (jmodify[1])
         print logmsg
         log(logmsg)   

         jail_start_stop('start', jname) # start jail after other action

         return False

def help():
   """
########################################################################################
# show help how to use jadm
#
   """
# return help string

   help = """
    initsetup - Initial JADM setup
    setup - Modify JADM setup
    help or ? - List available commands with "help" or detailed help with "help cmd"
    press 'TAB' - complete command 
    press 'up arrow' and 'down arrow' - last used command 
    introduction - This help information
    log - Write custom log message in jadm log  file (usage: log 'log message')
    about - About JADM
    exit - exit from JADM
   
    create - Create new Jail
    destroy - Destroy existing Jail and delete Jail data/zfs (usage: destroy 'jailname or jid')
    remove - Remove existing Jail but keep Jail data/zfs (usage: remove 'jailname or jid')
    modify -  Modify existing Jail (usage: modify 'jailname or jid')
    snap - Jail zfs snapshot managmet  
        -  Jail ZFS snapshots list (usage: snap list 'jailname or jid')
        -  Create new Jail ZFS snapshot (usage: snap create 'jailname or jid')
        -  Restroe Jail ZFS from snapshot (usage: snap restore 'jailname or jid')
        -  Remove Jail ZFS snapshot (usage: sanp remove 'jailname or jid')
    start - Start Jail (usage: start 'jailname, jid or all')
          - if jail name content \"tmeplate\" jadm will skip it when \"start all\" is used
    stop - Stop Jail (usage: stop 'jailname, jid or all')
    reboot - Reboot Jail (usage: stop 'jailname, jid or all')
    list - List Jails on the system
         - List Jail by name  (usage: list 'name/jid' )
         - List Jail by hostname  (usage: list hostname 'jail hostname' )
         - List Jail by ipaddress (usage: list ip 'ipaddress/netmask')
         - List Jails by gateway  (usage: list gw 'gateway ip')
         - List Actvie Jails      (usage: list active)
         - List Inactive Jails    (usage: list inactive)
    local - Jails local options
          - List Jail local options   (usage: local list 'name/jid' )
          - Remove Jail local options (usage: local remove 'name/jid' )
          - Add Jail local option     (usage: local add 'name/jid' 'option=val;')
   global - Jails global options
         - List Jails global options   (usage: global list )
         - Remove Jails global options (usage: gloval remove )
         - Add Jails global option     (usage: global add 'option=val;')
   shell - Enter in Jail (usage: shell 'jailname, jid or all')
   gateways - List available Jail gateways on the system
       """ 
   return help

def initsetup():
   """
########################################################################################
# initial setup if jadm is started for first time
# - check for FreeBSD kernel modules
# - check for existing zpool
# - check for existing bridge int.
# - create /etc/jail.conf (if exist make copy)
# - create main jadm zfs (all jadm jails will use it like e root zfs)
#
   """
   print " "
   print "   --- JADM Initial Setup ---"
   print " "

   print "   Check for loaded kernel modules..." 
   kernel_modules = ['zfs', 'opensolaris', 'if_bridge']
   for i in kernel_modules:
      os.system("kldstat -m %s" % (i))
   print " "

   print "   Check for ZFS zpools ..."
   os.system("zpool list")
   print " "
   os.system("zfs list")
   print " "

   print "   Check for existing Bridge interfces ..."

   br_interface = []
   bridges_sys = []
   gw_ipaddr = []
   gw_number = 0
   for i in netifaces.interfaces():
      if "bridge" in i:
         bridges_sys.append(i)
   if not bridges_sys:
      print "    Please create at least one bridge interfaces with at least one assigned ip address!"
      sys.exit(0)

   br_count = 0
   for x in bridges_sys:
      bripadd = netifaces.ifaddresses(x)[netifaces.AF_INET]
      for i in bripadd:
         br_interface.append([' ', ' ', i['addr'], i['netmask']])
         gw_ipaddr.append(i['addr'])
         br_count = br_count + 1
      br_interface[br_count - 1][1] = x 
      br_interface[br_count - 1][0] = gw_number
      gw_number = gw_number + 1

   br_menu = ["Number", "Bridge name", "Gateway IP Address", "Gatewy Network Mask"]
   print tabulate(br_interface, br_menu)
   print " "

   yn = raw_input("... Do you want to continue (y/n): ")
   if yn in "nN":
      print "            Interrupted by user"

      check_jailconf = os.path.isfile(jailconf)
      if check_jailconf == False:
         sys.exit(0)         
      return False
         
   if yn in "yY":
         
      print "       Enter Bridge interface number or ! for exit"
      while True:
         brid = raw_input("       Bridge number:> ")
         if brid == "!":
            print "            Interrupted by user - !"
            check_jailconf = os.path.isfile(jailconf)
            if check_jailconf == False:
               sys.exit(0)

            return False

         try:
            int(brid)
         except ValueError:
            print "            Slecet valid Bridge number (%s - %s)!" % (0, len(bridges_sys) - 1)
            continue

         if int(brid) >= len(bridges_sys):
            print "            Slecet valid Bridge number (%s - %s)!" % (0, len(bridges_sys) - 1)
            continue
 
         brid = bridges_sys[int(brid)]
         break
         print " "
   
      print "       Enter ZFS main JADM tank folder, all jails will be created under it (zpool/tank) or ! for exit"
 
      while True:
         jzfs = raw_input("       Enter zpool/tank:> ")
         if jzfs == "!":
            print "            Interrupted by user - !"
            check_jailconf = os.path.isfile(jailconf)
            if check_jailconf == False:
               sys.exit(0)

            return False

         zfs = subprocess.check_output("zfs list -H -o name", shell=True)
         zfs = zfs.split('\n')
         if jzfs in zfs:
            print "            We will use existing zpool/tank: %s" % (jzfs)
            break
    
         if os.WEXITSTATUS(os.system("zfs create %s" % (jzfs))) != 0:
             print "            Please enter correct zfs!"
             continue
         else:
             break
          
      print " "      
      set_menu  = ['JADM', 'Settings']
      bz = [["Bridge interface:", brid], ["Main zfs:", jzfs]]
      print tabulate(bz, set_menu)

      while True:
         yn = raw_input("... Please confirm JADM settings (y/n): ")
        
         if yn in "nN":
            print "            Interrupted by user"
            check_jailconf = os.path.isfile(jailconf)
            if check_jailconf == False:
               sys.exit(0)

            return False
         
         if yn in "yY":
            check_jailconf = os.path.isfile(jailconf)
            if check_jailconf == True:
               dt = datetime.now().strftime("%d_%m_%y_%I%M%S")
               os.system("cp %s %s" % (jailconf, jailconf+"."+dt))
               print "            '%s' exist we make a backup: %s" % (jailconf, jailconf+"."+dt)
               
            jc_file = open(jailconf, 'w+')
            
            config_instructions = ("""
#############################################################################################
# This file was generated by JADM %s in order to be manipulated properly by it.
# Please do not edit Defauls Settings section manualy or JADM will manipulated it wrong! 
# Please do not edit any default comment '#' in this file !
# 
# You can edit:
# -- Jails Global Options - all options under it will apply to all jails like default options 
# -- Jail Local Options - all options under it will apply only for jail for which they are set
#
# Jail settings structure:
# --------------------------------------------------
# 1 - jail name which apply also and to default jail path
# 2 - start jail config with wavy bracket
# 3 - do not remove this comment!
# 4 - jail hostname
# 5 - jail id which apply also and to jail epair interface number
# 6 - jail ipaddress/netmask
# 7 - jail default gateway - should be presen in bridge interface like alias address
# 8 - do not remove this comment!
# ... - you can add jail local options here
# 9. end jail config with wavy bracket
#############################################################################################
            """) % (jadm_version)
            new_config = [config_instructions, '################## Default Settings (DO NOT EDIT THIS SECTION MANUALY) ######################', '$jedir = "/%s/";' % (jzfs), '$bridge = "%s";' % (brid), '$epair = "epair$jid";', '$a = "a";', '$b = "b";', ' ', 'path = "$jedir$name";', 'vnet;', 'vnet.interface = "$epair$b";', \
'exec.start = "ifconfig lo0 127.0.0.1/8";', 'exec.prestart = "ifconfig $epair create";', 'exec.prestart += "ifconfig $bridge addm $epair$a up";', 'exec.prestart += "ifconfig $epair$a up";', \
'exec.start += "ifconfig $epair$b $jip";', 'exec.start += "route add default $jgw";', 'exec.start += "/bin/sh /etc/rc";', 'exec.poststop = "ifconfig $bridge deletem $epair$a";', 'exec.poststop += "ifconfig $epair$a destroy";', 'exec.stop = "/bin/sh /etc/rc.shutdown";', \
'exec.clean;', '####################### End of Default Settings ############################################', '#####################  Jails Global Options (YOU CAN CUSTOMIZE) ############################', 'mount.devfs;', 'allow.mount=1;', '###################### End of Jails Global Options ##########################################', '############################ Jails Settings #################################################', ' ']
   
            jc_file.write('\n'.join(new_config))
            jc_file.close()
            
# print and add to log file            
            print " "
            logmsg = " --- New '%s' was created! ---" % (jailconf)
            print logmsg
            log(logmsg)  
            print " " 

            return False

def setup():
   """
########################################################################################
# modify bridge interface in /etc/jail.conf
# modify zfs in /etc/jail.conf
# if zfs is modify rename all exsiting jails zfs under new jadm zfs
#
   """
   jails = jails_list()

   jail_start_stop('stop', 'all') # stop ALL jail befor other action

# Read jail.conf file 
   jcs = open(jailconf, 'r')
   jcs_list = []
   for i in jcs:
      jcs_list.append(i)
   jcs.close()
 
   print "          JADM Default Settings"
   print " " 
   set_menu  = ['JADM', 'Settings']
   bz = [["Bridge interface:", bridge_int], ["Main zfs:", jzfs]]
   print tabulate(bz, set_menu)
   print " "
  
   ch_choise = ['bridge', 'zfs', '!'] 
   print "       To change settings type 'bridge', 'zfs' or '!' for exit"
   while True:
      choise = raw_input("Do you want to change :> ")
      
      if choise == 'bridge':
         print " "
         print "   Check for existing Bridge interfces ..."
         
         br_interface = []
         bridges_sys = []
         gw_ipaddr = []
         gw_number = 0
         for i in netifaces.interfaces():
            if "bridge" in i:
               bridges_sys.append(i)
            
         br_count = 0
         for x in bridges_sys:
            try:
               bripadd = netifaces.ifaddresses(x)[netifaces.AF_INET]
            except:
               brake
            for i in bripadd:
               br_interface.append([' ', ' ', i['addr'], i['netmask']])
               gw_ipaddr.append(i['addr'])
               br_count = br_count + 1
            br_interface[br_count - 1][1] = x
            br_interface[br_count - 1][0] = gw_number
            gw_number = gw_number + 1
           
         br_menu = ["Number", "Bridge name", "Gateway IP Address", "Gatewy Network Mask"]
         print tabulate(br_interface, br_menu)
         print " "
  
         print "       Enter Bridge interface number or ! for exit"
         while True:
            brid = raw_input("       Bridge number(old: %s):> " % (bridge_int))
            if brid == "!":
               print "            Interrupted by user - !"
               return False
            
            try:
               int(brid)
            except ValueError:
               print "            Slecet valid Bridge number (%s - %s)!" % (0, len(bridges_sys) - 1)
               continue
   
            if int(brid) >= len(bridges_sys):
               print "            Slecet valid Bridge number (%s - %s)!" % (0, len(bridges_sys) - 1)
               continue
   
            brid = bridges_sys[int(brid)]

            # update $bridge in jail.conf
            for i in jcs_list:
               if "$bridge" in i:
                  update_jcs = jcs_list.index(i)
                  jcs_list[update_jcs] = '$bridge = "%s";\n' % (brid)
                  print " "
                  print "          WARNING please modify all jails for new '%s' networks!"  % (brid)
                  break

            break
         break
 
      elif choise == 'zfs':
         print "   Check for ZFS zpools ..."
         os.system("zpool list")
         print " "
         os.system("zfs list")
         print " "
         print "       Enter ZFS main JADM tank folder, all jails will be created under it (zpool/tank) or ! for exit"
         print " "
         print "       WARNING: JADM will rename all existing jails zfs under new zfs tank :WARNING"
         print " "

         while True:
            chjzfs = raw_input("       Enter zpool/tank(ols %s):> " % (jzfs))
            if chjzfs == "!":
               print "            Interrupted by user - !"
               return False
   
            zfs = subprocess.check_output("zfs list -H -o name", shell=True)
            zfs = zfs.split('\n')
            if chjzfs in zfs:
                print " "
                print "       -- We will use existing zpool/tank: %s" % (jzfs)
 
                for i in jails[1]:
                   if os.WEXITSTATUS(os.system("zfs rename %s %s" % (jzfs+"/"+i, chjzfs+"/"+i))) != 0:
                      print "       --- WARNING: '%s' cannot be renamed to '%s' - skipped!" % (jzfs+"/"+i, chjzfs+"/"+i)
                      print "       --- WARNING: '%s' data weill be keepd!" % (jzfs+"/"+i)
                      print "       --- WARNING: Please move manualy '%s' to '%s' before destroy '%s'" % (jzfs+"/"+i, chjzfs+"/"+i, jzfs)
                   else:
                      print "       --- '%s' was rename to '%s'" % (jzfs+"/"+i, chjzfs+"/"+i)

                jzfsyes = ""
                jzfsyes = raw_input("       --  Do you want to destroy old zfs '%s' tank (yes only):> " % (jzfs))
                if jzfsyes == "yes":
                   if os.WEXITSTATUS(os.system("zfs destroy -r %s" % (jzfs))) !=0:
                      print "error!"
                   else:
                      print "       --- '%s' was destroyed!" % (jzfs)
                elif jzfsyes != "yes":
                   print "       --- '%s' was keeped!" % (jzfs)

                break
   
            if os.WEXITSTATUS(os.system("zfs create %s" % (chjzfs))) != 0:
                print " "
                print "       Please enter correct zfs!"
                continue
            else:
                print "       --  New zfs '%s' tank was create!" % (chjzfs)

                for i in jails[1]:
                   if os.WEXITSTATUS(os.system("zfs rename %s %s" % (jzfs+"/"+i, chjzfs+"/"+i))) != 0:
                      print "       --- WARNING: '%s' cannot be renamed to '%s' - skipped!" % (jzfs+"/"+i, chjzfs+"/"+i)
                      print "       --- WARNING: '%s' data weill be keepd!"  % (jzfs+"/"+i)
                      print "       --- WARNING: Please move manualy '%s' to '%s' before destroy '%s'" % (jzfs+"/"+i, chjzfs+"/"+i, jzfs)
                   else:
                      print "       --- '%s' was rename to '%s'" % (jzfs+"/"+i, chjzfs+"/"+i)
             
                jzfsyes = ""
                jzfsyes = raw_input("       --  Do you want to destroy old zfs '%s' tank (yes only):> " % (jzfs))
                if jzfsyes == "yes":
                   if os.WEXITSTATUS(os.system("zfs destroy -r %s" % (jzfs))) !=0:
                      print "error!"
                   else:
                      print "       --- '%s' was destroyed!" % (jzfs)
                elif jzfsyes != "yes":
                   print "       --- '%s' was keeped!" % (jzfs)

                break

         # update $jedir in jail.conf
         for i in jcs_list:
            if "$jedir" in i:
               update_jcs = jcs_list.index(i)
               jcs_list[update_jcs] = '$jedir = "/%s/";\n' % (chjzfs)
               break
         break

      elif choise == '!':
         print "            Interrupted by user - !"
         return False
      else:
         print "       To change settings type 'bridge', 'mzfs' or '!' for exit"
   
# check if jail.conf exist
   check_jailconf = os.path.isfile(jailconf)
   if check_jailconf == True:
      dt = datetime.now().strftime("%d_%m_%y_%I%M%S")
      os.system("cp %s %s" % (jailconf, jailconf+"."+dt))
      print " "
      print "          '%s' exist we make a backup: %s" % (jailconf, jailconf+"."+dt)
      print " "

# write jail.conf file
   jcs = open(jailconf, 'w+')
   for i in jcs_list:
      jcs.write(i)
   jcs.close()

   def_vars()   
   print " "
   print "          JADM NEW Settings"
   print " "
   set_menu  = ['JADM', 'Settings']
   bz = [["Bridge interface:", bridge_int], ["Main zfs:", jzfs]]
   print tabulate(bz, set_menu)
   print " "
   
# print and add to log file            
   print " "
   logmsg = "WARNING: Jadm SETUP was modified"
   print logmsg
   log(logmsg)     

   jail_start_stop('start', 'all') # start ALL jail befor other action

def about():
   """
########################################################################################
# Shouw creator information also jadm license
#
   """
# return about string
   about = ("""
JADM %s
-------------
creator:  Nikolay Georgiev Dachev, <nikolay@dachev.info>
support:  jadm@dachev.info (only for bugs report and jadm issues)

please do not expect 24/7 support i will replay only by decision
at the moment 'jadm' is in development,
after first stable version i will provide mail list if is needed

Jadm is FreeBSD 10 jail administration framework with jail.conf, vnet and zfs support.

---------------- JADM is BSD 3-Clause Licensed ---------------------

Copyright (c) <2014>, <Nikolay Georgiev Dachev> <nikolay@dachev.info>
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distr

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
""") % (jadm_version)
   return about

def jid_jname(jnid):
   """
########################################################################################
# check if jail was selceted by JID or JAIL NAME
# if is found or not 
# always retund JAIL NAME
#
   """
   jails = jails_list()
   try:
      int(jnid) == True
      testid = 0
   except ValueError:
      testid = 1

   if testid == 0:
      if jnid in jails[2]:
         j = jails[2].index(jnid)
         jnid = jails[1][j]
      else:
         print "       Jail with ID '%s' not found!" % (jnid)
         return False

   return jnid 

def jail_table(mcmd):
   """
########################################################################################
# show all jails settings in tbale format 
# show individual jail settings in table format
#
   """
   jails = jails_list()
   one_jail = []
   lmen = ["ACTIVE", "JID", "NAME", "HOSTNAME", "IP ADDRESS", "GATEWAY", "PATH", "USED/FREE SPACE", "ZFS QUOTA",  "SNAPHOST"]
   
   if len(mcmd) == 2:
      if mcmd[1] ==  "active":
          for i in jails[7]:
              if i[0] == 1:
                  one_jail.append(i)
          print tabulate(one_jail, lmen)
          return False
      if mcmd[1] ==  "inactive":
          for i in jails[7]:
              if i[0] == 0:
                  one_jail.append(i)
          print tabulate(one_jail, lmen)
          return False
          
      jnid = jid_jname(mcmd[1])   
      if jnid == False:
         return False
      if jnid in jails[1]:
         for i in jails[7]:
            if i[2] == jnid: 
               one_jail.append(i)
         print tabulate(one_jail, lmen)
      else:
         print "       Jail with name '%s' not found!" % (jnid)
         return False

   if len(mcmd) == 1:
      print tabulate(jails[7], lmen)
      return False
      
   if len(mcmd) == 3:
       if mcmd[1] == "gw":
           for i in jails[7]:
               if i[5] == mcmd[2]:
                   one_jail.append(i)
           print tabulate(one_jail, lmen)
           return False
       if mcmd[1] == "ip":
           for i in jails[7]:
               if i[4] == mcmd[2]:
                   one_jail.append(i)
           print tabulate(one_jail, lmen)
           return False
       if mcmd[1] == "hostname":
           for i in jails[7]:
              if i[3] == mcmd[2]:
                   one_jail.append(i)
           print tabulate(one_jail, lmen)
           return False

def jail_shell(jnid = ''):
   """
########################################################################################
# enter in jail shell (jexec) using root shell from jail /etc/passwd
#
   """
   jails = jails_list()
   jnid = jid_jname(jnid)

   if jnid == False:
      return False

   if jnid not in jails[1]:
      print "       Jail with name '%s' not found!" % (jnid)
      return False
   
   root_sheel = subprocess.check_output("head -n3 /%s/%s/etc/passwd" % (jzfs, jnid) , shell=True).strip('jid')
   root_sheel = root_sheel.split(':')
# prtin and add to log file            
   print " "
   logmsg = "Enter in '%s' Jail!" % (jnid)
   print logmsg
   log(logmsg)   

   os.system ("jexec %s %s" % (jnid, root_sheel[-1]))
# prtin and add to log file            
   print " "
   logmsg = "Exit from '%s' Jail!" % (jnid)
   print logmsg
   log(logmsg)   

def jail_local_option(action,  jnid = '',  option = ''):
   """
########################################################################################
#  manipulate jail local options list, remove or add new option
#
   """
   jails = jails_list()
   jnid = jid_jname(jnid)

# check if jail name / id exist
   if jnid == False:
      return False

   if jnid not in jails[1]:
      print "       Jail with name '%s' not found!" % (jnid)
      return False
  
# find jail local options  
   fj = find_jail(jnid)
   jb = fj[0]
   je = fj[1]
   jcl = fj[2]
   
# create local options list
   lmen = ["Number", "### jail local options ### for jail '%s'" % (jnid)]
   jail_local_op = []
   number_local_op = 0
   for i in jcl[jb+8:je-1]:
      jail_local_op.append([number_local_op, i])
      number_local_op += 1
         
# list jail local option in /etc/jail.conf
   if action == "list":
      print tabulate(jail_local_op, lmen)
      return False
      
# remove jail local option from /etc/jail.conf
   if action == "rm":
      print tabulate(jail_local_op, lmen)
      print ""
      print "       Please select local option number which should be removed or '!' for exit"
      while True:
         rmlocal = raw_input("       Local option number:> ")
         if  rmlocal == "!":
            print "            Interrupted by user - !"
            return False

         try:
           int(rmlocal)
         except ValueError:
           print "            Slecet valid local option number (%s - %s)!" % (0, len(jail_local_op)  - 1)
           continue

         if int(rmlocal) >= len(jail_local_op):
            print "            Slecet valid local option number (%s - %s)!" % (0, len(jail_local_op) - 1)
            continue

# write new config with changed jail local option
         jc = open(jailconf, 'w')
         del jcl[jb+8+int(rmlocal)]
         jc.write('\n'.join(jcl))
         jc.close()
         print " "
         logmsg = "'%s' local option was removed from '%s' jail!" % (jail_local_op[int(rmlocal)][1],  jnid)
         print logmsg
         log(logmsg)  
 
         return False

# add new jail local config option at the end
   if action == "add":
         option = ''.join(option) # convert option list in string
       
         for i in ['=', ';']:
             if i not in list(option):
                print "       '%s' is not valid jail local option!" % (option)
                return False
       
# write new config with changed jail local option
         jc = open(jailconf, 'w')
         jcl.insert(je - 1,  option)
         jc.write('\n'.join(jcl))
         jc.close()
         print " "
         logmsg = "'%s' local option was added to '%s' jail!" % (option,  jnid)
         print logmsg
         log(logmsg)     
         
         return False  

   return False

def jail_global_option(action, option = ''):
   """
########################################################################################
#  manipulate jail global options list, remove or add new option
#
   """
   
# find jail global optins section by comment in /etc/jail.conf 
   fj = find_jail("#####################  Jails Global Options (YOU CAN CUSTOMIZE) ############################")
   jb = fj[0] + 1
   je = fj[1] - 1
   jcl = fj[2]

# create global options list
   lmen = ["Number", "Jails Global Options"]
   jail_global = []
   number_global = 0
   for i in jcl[jb:je]:
      jail_global.append([number_global, i])
      number_global += 1

# list jail global options in /etc/jail.conf
   if action == "list":
      print tabulate(jail_global, lmen)
      return False
      
# remove jail global option from /etc/jail.conf
   if action == "rm":
      print tabulate(jail_global, lmen)
      print ""
      print "       Please select global option number which should be removed or '!' for exit"
      while True:
         rmglobal = raw_input("       Global option number:> ")
         if  rmglobal == "!":
            print "            Interrupted by user - !"
            return False

         try:
           int(rmglobal)
         except ValueError:
           print "            Slecet valid Global option number (%s - %s)!" % (0, len(jail_global)  - 1)
           continue

         if int(rmglobal) >= len(jail_global):
            print "            Slecet valid Global option number (%s - %s)!" % (0, len(jail_global) - 1)
            continue
            
# write new config with changed jails global options
         jc = open(jailconf, 'w')
         del jcl[jb+int(rmglobal)]
         jc.write('\n'.join(jcl))
         jc.close()
         print " "
         logmsg = "'%s' Global option was removed!" % (jail_global[int(rmglobal)][1])
         print logmsg
         log(logmsg)     
   
         return False

# add new jail global option at the end
   if action == "add":
         option = ''.join(option) # convert option list in string
       
         for i in ['=', ';']:
             if i not in list(option):
                print "       '%s' is not valid jail global option!" % (option)
                return False
       
# write new config with changed jail local option
         jc = open(jailconf, 'w')
         jcl.insert(je,  option)
         jc.write('\n'.join(jcl))
         jc.close()
         logmsg = "'%s' Global option was added!" % (option)
         print logmsg
         log(logmsg)   
  
         return False  

def log(string):
# data and time
    dt = datetime.now().strftime("%b %d %H:%M:%S")

# check if log file exist / if not create it
    check_logf = os.path.isfile(logfile)
    if check_logf == False:
        os.system("touch %s" % (logfile))
        firstlog = "%s %s jadm: jadm log file was created!" % (dt, os.uname()[1])
        os.system("echo '%s' > %s" % (firstlog,  logfile))

# applay string to log file
    string = "%s %s jadm: %s" % (dt, os.uname()[1],  string)
    os.system("echo '%s' >> %s" % (string,  logfile))

########################################################################################
# MAIN MENU
########################################################################################

class lcmd(cmd.Cmd):
   """
########################################################################################
#  interactive main menu with 'cmd' function
#
   """
 
   prompt = 'jadm:> '
   
   local_global = ['list',  'remove',  'add']
   snap = ['list', 'create',  'remove',  'restore']
   listcmd = ['list', 'name',  'hostname',  'ip',  'gw',  'active',  'inactive']

   def do_log(self,  arg):
      """ Write custom log message in jadm log  file (usage: log 'log message')
      """
      arg = "%s :custom log" % (arg)
      log(arg)

   def do_introduction(self,  arg):
        """ Show all available commands in Jadm
        """
        print help()
        cmd.Cmd.do_help(self, arg) 
        
   def emptyline(self):
      pass
      
   def do_initsetup(self, arg):
       """Initial JADM setup 
       """
       initsetup()

   def do_setup(self, arg):
       """Modify JADM setup
       """
       setup()

   def do_about(self, arg):
       """About JADM 
       """
       print about()
       
   def do_exit(self, arg):
        """ Exit from JADM shell
        """
        print "Good bye!"
        sys.exit(1)

   def do_create(self, arg):
        """ Create new Jail
        """
        jail_create()

   def do_destroy(self, arg):
        """ Destroy existing Jail and delete Jail data/zfs (usage: destroy 'jailname or jid')
        """
        jail_destroy('destroy',  arg)
        
   def do_remove(self, arg):
        """ Remove existing Jail but keep Jail data/zfs (usage: remove 'jailname or jid')
        """
        jail_destroy('remove',  arg)
        
   def do_modify(self, arg):
        """ Modify existing Jail (usage: modify 'jailname or jid')
        """
        jail_modify(arg)
        
   def do_snap(self, arg):
        """ Jail zfs snapshot managmet  
        -  Jail ZFS snapshots list (usage: snap list 'jailname or jid')
        -  Create new Jail ZFS snapshot (usage: snap create 'jailname or jid')
        -  Restroe Jail ZFS from snapshot (usage: snap restore 'jailname or jid')
        -  Remove Jail ZFS snapshot (usage: sanp remove 'jailname or jid')
        """
        arg = str(arg).split(' ')
        arg = [i for i in arg if i != '']
        
        if len(arg) == 2: 
           if arg[0] == "list":
              jail_snapshot('listsnap', arg[1])
           if arg[0] == "create":
              jail_snapshot('createsnap', arg[1])
           if arg[0] == "restore":
              jail_snapshot('restoresnap', arg[1])
           if arg[0] == "remove":
              jail_snapshot('rmsnap', arg[1])
        else:
           print "       Please check \'help snap\' for valid commands!"

   def complete_snap(self, text, line, begidx, endidx):

        if not text:
            completions = self.snap[:]
        else:
            completions = [ f
                            for f in self.snap
                            if f.startswith(text)
                            ]
        return completions

   def do_list(self, arg):
        """ List Jails on the system
         - List Jail by name  (usage: list 'name/jid' )
         - List Jail by hostname  (usage: list hostname 'jail hostname' )
         - List Jail by ipaddress (usage: list ip 'ipaddress/netmask')
         - List Jails by gateway  (usage: list gw 'gateway ip')
         - List Actvie Jails      (usage: list active)
         - List Inactive Jails    (usage: list inactive)
        """
        arg = str(arg).split(' ') 
      
        if arg[0] != '':
            arg.insert(0,'list')
            arg = [i for i in arg if i != '']
 
        jail_table(arg)
        
   def complete_list(self, text, line, begidx, endidx):

        if not text:
            completions = self.listcmd[:]
        else:
            completions = [ f
                            for f in self.listcmd
                            if f.startswith(text)
                            ]
        return completions
        
   def do_start(self, arg):
        """ Start Jail (usage: start 'jailname, jid or all')
         - if jail name content \"tmeplate\" jadm will skip it when \"start all\" is used
        """
        jail_start_stop('start', arg)
        
   def do_stop(self, arg):
        """ Stop new Jail (usage: stop 'jailname, jid or all')
        """
        jail_start_stop('stop', arg)
        
   def do_reboot(self, arg):
        """ Reboot Jail (usage: stop 'jailname, jid or all')
        """
        jail_start_stop('reboot', arg)

   def do_local(self, arg):
       """Jails local options
          - List Jail local options   (usage: local list 'name/jid' )
          - Remove Jail local options (usage: local remove 'name/jid' )
          - Add Jail local option     (usage: local add 'name/jid' 'option=val;')
       """
       arg = str(arg).split(' ')
       arg = [i for i in arg if i != '']

       if arg[0] == 'list':
          if len(arg) == 2: 
             jail_local_option('list',  arg[1])
          else:
             print "       Please enter \'help local\' for valid commands!"  
       if arg[0] == 'add':
          if len(arg) >= 3:
             jail_local_option('add',  arg[1],  arg[2:])
          else:
             print "       Please enter \'help local\' for valid commands!"  
             
       if arg[0] == 'remove':
          if len(arg) >= 2:
             jail_local_option('rm',  arg[1])
          else:
             print "       Please enter \'help local\' for valid commands!"  
                             

   def complete_local(self, text, line, begidx, endidx):

        if not text:
            completions = self.local_global[:]
        else:
            completions = [ f
                            for f in self.local_global
                            if f.startswith(text)
                            ]
        return completions

   def do_global(self, arg):
       """Jails global options
         - List Jails global options   (usage: global list )
         - Remove Jails global options (usage: gloval remove )
         - Add Jails global option     (usage: global add 'option=val;')
       """
       arg = str(arg).split(' ')
       arg = [i for i in arg if i != '']

       if arg[0] == 'list':
          if len(arg) == 1: 
             jail_global_option('list',  arg)
          else:
             print "       Please enter \'help global\' for valid commands!"  
       if arg[0] == 'add':
          if len(arg) >= 2:
             jail_global_option('add',  arg[1:])
          else:
             print "       Please enter \'help global\' for valid commands!"  
       if arg[0] == 'remove':
          if len(arg) == 1:
             jail_global_option('rm')
          else:
             print "       Please enter \'help global\' for valid commands!"            
        
   def complete_global(self, text, line, begidx, endidx):

        if not text:
            completions = self.local_global[:]
        else:
            completions = [ f
                            for f in self.local_global
                            if f.startswith(text)
                            ]
        return completions

   def do_shell(self, arg):
        """  Enter in Jail (usage: shell 'jailname, jid or all')
        """
        jail_shell(arg)
        
   def do_gateways(self, arg):
        """ List available Jail gateways on the system
        """
        bridge()

########################################################################################
# Start Jadm script
########################################################################################

# check for existing bridge and zfs 
initcheck()

# load default jadm varibles
def_vars()

# main menu shell
lcmd().cmdloop()

########################################################################################
# End Jadm script 
########################################################################################
